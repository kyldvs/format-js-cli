
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var getPosition = require('./getPosition');
var getRawPosition = require('./getRawPosition');

// Accuracy determines how many tokens we look for to guess the position.
var ACCURACIES = [15, 4, 1];
var WHITESPACE = '\\s*';

/**
 * Given the starting source, starting position, and the ending source this
 * function guesses where the cursor should move to.
 */
function updateCursor(startSource, startPosition, endSource) {
  for (var accuracy of ACCURACIES) {
    var result = maybeUpdateCursorWithAccuracy(startSource, startPosition, endSource, accuracy);
    if (result) {
      return result;
    }
  }
  // TODO: Guess a little better, perhaps detect line difference or something?
  return startPosition;
}

function maybeUpdateCursorWithAccuracy(startSource, startPosition, endSource, accuracy) {
  var rawStartPosition = getRawPosition(startSource, startPosition);
  var regexParts = [];
  var inWord = false;
  for (var i = rawStartPosition - 1, found = 0; i >= 0 && found < accuracy; i--) {
    var char = startSource.charAt(i);
    if (/\s/.test(char)) {
      if (regexParts[0] !== WHITESPACE) {
        regexParts.unshift(WHITESPACE);
      }
      if (inWord) {
        found++;
        inWord = false;
      }
    } else {
      // TODO: Add optional catch all at word boundaries to account for adding
      // commas in a transform. Is this even necessary?
      if (/\w/.test(char)) {
        // We are starting a word so there can be whitespace.
        if (!inWord) {
          // We don't need to add it if it's already there, or this is the
          // very first regex part.
          if (regexParts[0] !== WHITESPACE && regexParts.length > 0) {
            regexParts.unshift(WHITESPACE);
          }
        }
        inWord = true;
        regexParts.unshift(char);
      } else {
        // We are ending a word so there can be whitespace.
        if (inWord) {
          regexParts.unshift(WHITESPACE);
          found++;
          inWord = false;
        }
        var escapedChar = char.replace(/[[{()*+?.\\^$|]/g, '\\$&');
        regexParts.unshift(escapedChar + '?');
      }
    }
  }
  var regex = new RegExp(regexParts.join(''));
  var result = regex.exec(endSource);
  if (!result) {
    return null;
  }
  var rawEndPosition = result[0].length + result.index;
  return getPosition(endSource, rawEndPosition);
}

module.exports = updateCursor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLXVwZGF0ZS1jdXJzb3IvbGliL3VwZGF0ZUN1cnNvci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7QUFXWixJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0MsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7OztBQUduRCxJQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDOzs7Ozs7QUFNMUIsU0FBUyxZQUFZLENBQ25CLFdBQW1CLEVBQ25CLGFBQTRDLEVBQzVDLFNBQWlCLEVBQ2M7QUFDL0IsT0FBSyxJQUFNLFFBQVEsSUFBSSxVQUFVLEVBQUU7QUFDakMsUUFBTSxNQUFNLEdBQUcsNkJBQTZCLENBQzFDLFdBQVcsRUFDWCxhQUFhLEVBQ2IsU0FBUyxFQUNULFFBQVEsQ0FDVCxDQUFDO0FBQ0YsUUFBSSxNQUFNLEVBQUU7QUFDVixhQUFPLE1BQU0sQ0FBQztLQUNmO0dBQ0Y7O0FBRUQsU0FBTyxhQUFhLENBQUM7Q0FDdEI7O0FBRUQsU0FBUyw2QkFBNkIsQ0FDcEMsV0FBbUIsRUFDbkIsYUFBNEMsRUFDNUMsU0FBaUIsRUFDakIsUUFBZ0IsRUFDZ0I7QUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7QUFDbkIsT0FDRSxJQUFJLENBQUMsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFDdkMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsUUFBUSxFQUMxQixDQUFDLEVBQUUsRUFDSDtBQUNBLFFBQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ25CLFVBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtBQUNoQyxrQkFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztPQUNoQztBQUNELFVBQUksTUFBTSxFQUFFO0FBQ1YsYUFBSyxFQUFFLENBQUM7QUFDUixjQUFNLEdBQUcsS0FBSyxDQUFDO09BQ2hCO0tBQ0YsTUFBTTs7O0FBR0wsVUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFOztBQUVuQixZQUFJLENBQUMsTUFBTSxFQUFFOzs7QUFHWCxjQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDekQsc0JBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7V0FDaEM7U0FDRjtBQUNELGNBQU0sR0FBRyxJQUFJLENBQUM7QUFDZCxrQkFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUMxQixNQUFNOztBQUVMLFlBQUksTUFBTSxFQUFFO0FBQ1Ysb0JBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDL0IsZUFBSyxFQUFFLENBQUM7QUFDUixnQkFBTSxHQUFHLEtBQUssQ0FBQztTQUNoQjtBQUNELFlBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0Qsa0JBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDO09BQ3ZDO0tBQ0Y7R0FDRjtBQUNELE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM5QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JDLE1BQUksQ0FBQyxNQUFNLEVBQUU7QUFDWCxXQUFPLElBQUksQ0FBQztHQUNiO0FBQ0QsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3ZELFNBQU8sV0FBVyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztDQUMvQzs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS11cGRhdGUtY3Vyc29yL2xpYi91cGRhdGVDdXJzb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBnZXRQb3NpdGlvbiA9IHJlcXVpcmUoJy4vZ2V0UG9zaXRpb24nKTtcbmNvbnN0IGdldFJhd1Bvc2l0aW9uID0gcmVxdWlyZSgnLi9nZXRSYXdQb3NpdGlvbicpO1xuXG4vLyBBY2N1cmFjeSBkZXRlcm1pbmVzIGhvdyBtYW55IHRva2VucyB3ZSBsb29rIGZvciB0byBndWVzcyB0aGUgcG9zaXRpb24uXG5jb25zdCBBQ0NVUkFDSUVTID0gWzE1LCA0LCAxXTtcbmNvbnN0IFdISVRFU1BBQ0UgPSAnXFxcXHMqJztcblxuLyoqXG4gKiBHaXZlbiB0aGUgc3RhcnRpbmcgc291cmNlLCBzdGFydGluZyBwb3NpdGlvbiwgYW5kIHRoZSBlbmRpbmcgc291cmNlIHRoaXNcbiAqIGZ1bmN0aW9uIGd1ZXNzZXMgd2hlcmUgdGhlIGN1cnNvciBzaG91bGQgbW92ZSB0by5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlQ3Vyc29yKFxuICBzdGFydFNvdXJjZTogc3RyaW5nLFxuICBzdGFydFBvc2l0aW9uOiB7cm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyfSxcbiAgZW5kU291cmNlOiBzdHJpbmcsXG4pOiB7cm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyfSB7XG4gIGZvciAoY29uc3QgYWNjdXJhY3kgb2YgQUNDVVJBQ0lFUykge1xuICAgIGNvbnN0IHJlc3VsdCA9IG1heWJlVXBkYXRlQ3Vyc29yV2l0aEFjY3VyYWN5KFxuICAgICAgc3RhcnRTb3VyY2UsXG4gICAgICBzdGFydFBvc2l0aW9uLFxuICAgICAgZW5kU291cmNlLFxuICAgICAgYWNjdXJhY3ksXG4gICAgKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuICAvLyBUT0RPOiBHdWVzcyBhIGxpdHRsZSBiZXR0ZXIsIHBlcmhhcHMgZGV0ZWN0IGxpbmUgZGlmZmVyZW5jZSBvciBzb21ldGhpbmc/XG4gIHJldHVybiBzdGFydFBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBtYXliZVVwZGF0ZUN1cnNvcldpdGhBY2N1cmFjeShcbiAgc3RhcnRTb3VyY2U6IHN0cmluZyxcbiAgc3RhcnRQb3NpdGlvbjoge3JvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcn0sXG4gIGVuZFNvdXJjZTogc3RyaW5nLFxuICBhY2N1cmFjeTogbnVtYmVyLFxuKTogP3tyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXJ9IHtcbiAgY29uc3QgcmF3U3RhcnRQb3NpdGlvbiA9IGdldFJhd1Bvc2l0aW9uKHN0YXJ0U291cmNlLCBzdGFydFBvc2l0aW9uKTtcbiAgY29uc3QgcmVnZXhQYXJ0cyA9IFtdO1xuICBsZXQgaW5Xb3JkID0gZmFsc2U7XG4gIGZvciAoXG4gICAgbGV0IGkgPSByYXdTdGFydFBvc2l0aW9uIC0gMSwgZm91bmQgPSAwO1xuICAgIGkgPj0gMCAmJiBmb3VuZCA8IGFjY3VyYWN5O1xuICAgIGktLVxuICApIHtcbiAgICBjb25zdCBjaGFyID0gc3RhcnRTb3VyY2UuY2hhckF0KGkpO1xuICAgIGlmICgvXFxzLy50ZXN0KGNoYXIpKSB7XG4gICAgICBpZiAocmVnZXhQYXJ0c1swXSAhPT0gV0hJVEVTUEFDRSkge1xuICAgICAgICByZWdleFBhcnRzLnVuc2hpZnQoV0hJVEVTUEFDRSk7XG4gICAgICB9XG4gICAgICBpZiAoaW5Xb3JkKSB7XG4gICAgICAgIGZvdW5kKys7XG4gICAgICAgIGluV29yZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBBZGQgb3B0aW9uYWwgY2F0Y2ggYWxsIGF0IHdvcmQgYm91bmRhcmllcyB0byBhY2NvdW50IGZvciBhZGRpbmdcbiAgICAgIC8vIGNvbW1hcyBpbiBhIHRyYW5zZm9ybS4gSXMgdGhpcyBldmVuIG5lY2Vzc2FyeT9cbiAgICAgIGlmICgvXFx3Ly50ZXN0KGNoYXIpKSB7XG4gICAgICAgIC8vIFdlIGFyZSBzdGFydGluZyBhIHdvcmQgc28gdGhlcmUgY2FuIGJlIHdoaXRlc3BhY2UuXG4gICAgICAgIGlmICghaW5Xb3JkKSB7XG4gICAgICAgICAgLy8gV2UgZG9uJ3QgbmVlZCB0byBhZGQgaXQgaWYgaXQncyBhbHJlYWR5IHRoZXJlLCBvciB0aGlzIGlzIHRoZVxuICAgICAgICAgIC8vIHZlcnkgZmlyc3QgcmVnZXggcGFydC5cbiAgICAgICAgICBpZiAocmVnZXhQYXJ0c1swXSAhPT0gV0hJVEVTUEFDRSAmJiByZWdleFBhcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlZ2V4UGFydHMudW5zaGlmdChXSElURVNQQUNFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5Xb3JkID0gdHJ1ZTtcbiAgICAgICAgcmVnZXhQYXJ0cy51bnNoaWZ0KGNoYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgYXJlIGVuZGluZyBhIHdvcmQgc28gdGhlcmUgY2FuIGJlIHdoaXRlc3BhY2UuXG4gICAgICAgIGlmIChpbldvcmQpIHtcbiAgICAgICAgICByZWdleFBhcnRzLnVuc2hpZnQoV0hJVEVTUEFDRSk7XG4gICAgICAgICAgZm91bmQrKztcbiAgICAgICAgICBpbldvcmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlc2NhcGVkQ2hhciA9IGNoYXIucmVwbGFjZSgvW1t7KCkqKz8uXFxcXF4kfF0vZywgJ1xcXFwkJicpO1xuICAgICAgICByZWdleFBhcnRzLnVuc2hpZnQoZXNjYXBlZENoYXIgKyAnPycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhQYXJ0cy5qb2luKCcnKSk7XG4gIGNvbnN0IHJlc3VsdCA9IHJlZ2V4LmV4ZWMoZW5kU291cmNlKTtcbiAgaWYgKCFyZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCByYXdFbmRQb3NpdGlvbiA9IHJlc3VsdFswXS5sZW5ndGggKyByZXN1bHQuaW5kZXg7XG4gIHJldHVybiBnZXRQb3NpdGlvbihlbmRTb3VyY2UsIHJhd0VuZFBvc2l0aW9uKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1cGRhdGVDdXJzb3I7XG4iXX0=
