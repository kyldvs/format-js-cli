

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var getDeclaredIdentifiers = require('../utils/getDeclaredIdentifiers');
var getNamesFromID = require('../utils/getNamesFromID');
var getNonDeclarationIdentifiers = require('../utils/getNonDeclarationIdentifiers');
var hasOneRequireDeclaration = require('../utils/hasOneRequireDeclaration');
var isGlobal = require('../utils/isGlobal');
var jscs = require('jscodeshift');

function removeUnusedRequires(root, options) {
  var used = getNonDeclarationIdentifiers(root, options);
  var nonRequires = getDeclaredIdentifiers(root, options, [function (path) {
    return !hasOneRequireDeclaration(path.node);
  }]);

  // Remove unused requires.
  root.find(jscs.VariableDeclaration).filter(function (path) {
    return isGlobal(path);
  }).filter(function (path) {
    return hasOneRequireDeclaration(path.node);
  }).filter(function (path) {
    var id = path.node.declarations[0].id;
    var names = getNamesFromID(id);
    for (var _name of names) {
      if (used.has(_name) && !nonRequires.has(_name)) {
        return false;
      }
    }
    return true;
  }).remove();
}

module.exports = removeUnusedRequires;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi9yZXF1aXJlcy9yZW1vdmVVbnVzZWRSZXF1aXJlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOztBQWNaLElBQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFDMUUsSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDMUQsSUFBTSw0QkFBNEIsR0FBRyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUN0RixJQUFNLHdCQUF3QixHQUFHLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQzlFLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzlDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7QUFFcEMsU0FBUyxvQkFBb0IsQ0FDM0IsSUFBZ0IsRUFDaEIsT0FBc0IsRUFDaEI7QUFDTixNQUFNLElBQUksR0FBRyw0QkFBNEIsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDekQsTUFBTSxXQUFXLEdBQUcsc0JBQXNCLENBQ3hDLElBQUksRUFDSixPQUFPLEVBQ1AsQ0FBQyxVQUFBLElBQUk7V0FBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FBQSxDQUFDLENBQy9DLENBQUM7OztBQUdGLE1BQUksQ0FDRCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQzlCLE1BQU0sQ0FBQyxVQUFBLElBQUk7V0FBSSxRQUFRLENBQUMsSUFBSSxDQUFDO0dBQUEsQ0FBQyxDQUM5QixNQUFNLENBQUMsVUFBQSxJQUFJO1dBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztHQUFBLENBQUMsQ0FDbkQsTUFBTSxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ2QsUUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3hDLFFBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqQyxTQUFLLElBQU0sS0FBSSxJQUFJLEtBQUssRUFBRTtBQUN4QixVQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxFQUFFO0FBQzVDLGVBQU8sS0FBSyxDQUFDO09BQ2Q7S0FDRjtBQUNELFdBQU8sSUFBSSxDQUFDO0dBQ2IsQ0FBQyxDQUNELE1BQU0sRUFBRSxDQUFDO0NBQ2I7O0FBRUQsTUFBTSxDQUFDLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyIsImZpbGUiOiIvdmFyL2ZvbGRlcnMveGYvcnNwaDRfYzU3MzE1cnM1N3h4c2Rza3J4bnYzNnQwL1QvdG1wcGZsNTJucHVibGlzaF9wYWNrYWdlcy9ucG0vbnVjbGlkZS1mb3JtYXQtanMtYmFzZS9saWIvcmVxdWlyZXMvcmVtb3ZlVW51c2VkUmVxdWlyZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sbGVjdGlvbiwgTm9kZSwgTm9kZVBhdGh9IGZyb20gJy4uL3R5cGVzL2FzdCc7XG5pbXBvcnQgdHlwZSB7U291cmNlT3B0aW9uc30gZnJvbSAnLi4vb3B0aW9ucy9Tb3VyY2VPcHRpb25zJztcblxuY29uc3QgZ2V0RGVjbGFyZWRJZGVudGlmaWVycyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldERlY2xhcmVkSWRlbnRpZmllcnMnKTtcbmNvbnN0IGdldE5hbWVzRnJvbUlEID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0TmFtZXNGcm9tSUQnKTtcbmNvbnN0IGdldE5vbkRlY2xhcmF0aW9uSWRlbnRpZmllcnMgPSByZXF1aXJlKCcuLi91dGlscy9nZXROb25EZWNsYXJhdGlvbklkZW50aWZpZXJzJyk7XG5jb25zdCBoYXNPbmVSZXF1aXJlRGVjbGFyYXRpb24gPSByZXF1aXJlKCcuLi91dGlscy9oYXNPbmVSZXF1aXJlRGVjbGFyYXRpb24nKTtcbmNvbnN0IGlzR2xvYmFsID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNHbG9iYWwnKTtcbmNvbnN0IGpzY3MgPSByZXF1aXJlKCdqc2NvZGVzaGlmdCcpO1xuXG5mdW5jdGlvbiByZW1vdmVVbnVzZWRSZXF1aXJlcyhcbiAgcm9vdDogQ29sbGVjdGlvbixcbiAgb3B0aW9uczogU291cmNlT3B0aW9ucyxcbik6IHZvaWQge1xuICBjb25zdCB1c2VkID0gZ2V0Tm9uRGVjbGFyYXRpb25JZGVudGlmaWVycyhyb290LCBvcHRpb25zKTtcbiAgY29uc3Qgbm9uUmVxdWlyZXMgPSBnZXREZWNsYXJlZElkZW50aWZpZXJzKFxuICAgIHJvb3QsXG4gICAgb3B0aW9ucyxcbiAgICBbcGF0aCA9PiAhaGFzT25lUmVxdWlyZURlY2xhcmF0aW9uKHBhdGgubm9kZSldXG4gICk7XG5cbiAgLy8gUmVtb3ZlIHVudXNlZCByZXF1aXJlcy5cbiAgcm9vdFxuICAgIC5maW5kKGpzY3MuVmFyaWFibGVEZWNsYXJhdGlvbilcbiAgICAuZmlsdGVyKHBhdGggPT4gaXNHbG9iYWwocGF0aCkpXG4gICAgLmZpbHRlcihwYXRoID0+IGhhc09uZVJlcXVpcmVEZWNsYXJhdGlvbihwYXRoLm5vZGUpKVxuICAgIC5maWx0ZXIocGF0aCA9PiB7XG4gICAgICBjb25zdCBpZCA9IHBhdGgubm9kZS5kZWNsYXJhdGlvbnNbMF0uaWQ7XG4gICAgICBjb25zdCBuYW1lcyA9IGdldE5hbWVzRnJvbUlEKGlkKTtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICBpZiAodXNlZC5oYXMobmFtZSkgJiYgIW5vblJlcXVpcmVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSlcbiAgICAucmVtb3ZlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVtb3ZlVW51c2VkUmVxdWlyZXM7XG4iXX0=
