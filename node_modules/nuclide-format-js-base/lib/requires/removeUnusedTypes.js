

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var getDeclaredIdentifiers = require('../utils/getDeclaredIdentifiers');
var getDeclaredTypes = require('../utils/getDeclaredTypes');
var getNonDeclarationTypes = require('../utils/getNonDeclarationTypes');
var isGlobal = require('../utils/isGlobal');
var jscs = require('jscodeshift');

var match = jscs.match;

// These are the things we should try to remove.
var CONFIG = [
// import type Foo from 'Foo';
{
  searchTerms: [jscs.ImportDeclaration, { importKind: 'type' }],
  filters: [isGlobal],
  getNames: function getNames(node) {
    return node.specifiers.map(function (specifier) {
      return specifier.local.name;
    });
  }
}];

function removeUnusedTypes(root, options) {
  var declared = getDeclaredIdentifiers(root, options);
  var used = getNonDeclarationTypes(root, options);
  var nonTypeImport = getDeclaredTypes(root, options, [function (path) {
    return !isTypeImportDeclaration(path.node);
  }]);
  // Remove things based on the config.
  CONFIG.forEach(function (config) {
    root.find(config.searchTerms[0], config.searchTerms[1]).filter(function (path) {
      return config.filters.every(function (filter) {
        return filter(path);
      });
    }).filter(function (path) {
      return config.getNames(path.node).every(function (name) {
        return !used.has(name) || declared.has(name) || nonTypeImport.has(name);
      });
    }).remove();
  });
}

function isTypeImportDeclaration(node) {
  return match(node, {
    type: 'ImportDeclaration',
    importKind: 'type'
  });
}

module.exports = removeUnusedTypes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi9yZXF1aXJlcy9yZW1vdmVVbnVzZWRUeXBlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsV0FBVyxDQUFDOztBQWNaLElBQU0sc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFDMUUsSUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUM5RCxJQUFNLHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQzFFLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzlDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7SUFFN0IsS0FBSyxHQUFJLElBQUksQ0FBYixLQUFLOzs7QUFTWixJQUFNLE1BQTBCLEdBQUc7O0FBRWpDO0FBQ0UsYUFBVyxFQUFFLENBQ1gsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsQ0FDckI7QUFDRCxTQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7QUFDbkIsVUFBUSxFQUFFLGtCQUFBLElBQUk7V0FBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFBLFNBQVM7YUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUk7S0FBQSxDQUFDO0dBQUE7Q0FDekUsQ0FDRixDQUFDOztBQUVGLFNBQVMsaUJBQWlCLENBQUMsSUFBZ0IsRUFBRSxPQUFzQixFQUFRO0FBQ3pFLE1BQU0sUUFBUSxHQUFHLHNCQUFzQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2RCxNQUFNLElBQUksR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbkQsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQ3BDLElBQUksRUFDSixPQUFPLEVBQ1AsQ0FBQyxVQUFBLElBQUk7V0FBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7R0FBQSxDQUFDLENBQzlDLENBQUM7O0FBRUYsUUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU0sRUFBSTtBQUN2QixRQUFJLENBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUNsRCxNQUFNLENBQUMsVUFBQSxJQUFJO2FBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBQSxNQUFNO2VBQUksTUFBTSxDQUFDLElBQUksQ0FBQztPQUFBLENBQUM7S0FBQSxDQUFDLENBQzVELE1BQU0sQ0FBQyxVQUFBLElBQUk7YUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQzlDLFVBQUEsSUFBSTtlQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO09BQUEsQ0FDekU7S0FBQSxDQUFDLENBQ0QsTUFBTSxFQUFFLENBQUM7R0FDYixDQUFDLENBQUM7Q0FDSjs7QUFFRCxTQUFTLHVCQUF1QixDQUFDLElBQWMsRUFBVztBQUN4RCxTQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUU7QUFDakIsUUFBSSxFQUFFLG1CQUFtQjtBQUN6QixjQUFVLEVBQUUsTUFBTTtHQUNuQixDQUFDLENBQUM7Q0FDSjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi9yZXF1aXJlcy9yZW1vdmVVbnVzZWRUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtDb2xsZWN0aW9uLCBOb2RlLCBOb2RlUGF0aH0gZnJvbSAnLi4vdHlwZXMvYXN0JztcbmltcG9ydCB0eXBlIHtTb3VyY2VPcHRpb25zfSBmcm9tICcuLi9vcHRpb25zL1NvdXJjZU9wdGlvbnMnO1xuXG5jb25zdCBnZXREZWNsYXJlZElkZW50aWZpZXJzID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0RGVjbGFyZWRJZGVudGlmaWVycycpO1xuY29uc3QgZ2V0RGVjbGFyZWRUeXBlcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldERlY2xhcmVkVHlwZXMnKTtcbmNvbnN0IGdldE5vbkRlY2xhcmF0aW9uVHlwZXMgPSByZXF1aXJlKCcuLi91dGlscy9nZXROb25EZWNsYXJhdGlvblR5cGVzJyk7XG5jb25zdCBpc0dsb2JhbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzR2xvYmFsJyk7XG5jb25zdCBqc2NzID0gcmVxdWlyZSgnanNjb2Rlc2hpZnQnKTtcblxuY29uc3Qge21hdGNofSA9IGpzY3M7XG5cbnR5cGUgQ29uZmlnRW50cnkgPSB7XG4gIHNlYXJjaFRlcm1zOiBbYW55LCBPYmplY3RdLFxuICBmaWx0ZXJzOiBBcnJheTwocGF0aDogTm9kZVBhdGgpID0+IGJvb2xlYW4+LFxuICBnZXROYW1lczogKG5vZGU6IE5vZGUpID0+IEFycmF5PHN0cmluZz4sXG59O1xuXG4vLyBUaGVzZSBhcmUgdGhlIHRoaW5ncyB3ZSBzaG91bGQgdHJ5IHRvIHJlbW92ZS5cbmNvbnN0IENPTkZJRzogQXJyYXk8Q29uZmlnRW50cnk+ID0gW1xuICAvLyBpbXBvcnQgdHlwZSBGb28gZnJvbSAnRm9vJztcbiAge1xuICAgIHNlYXJjaFRlcm1zOiBbXG4gICAgICBqc2NzLkltcG9ydERlY2xhcmF0aW9uLFxuICAgICAge2ltcG9ydEtpbmQ6ICd0eXBlJ30sXG4gICAgXSxcbiAgICBmaWx0ZXJzOiBbaXNHbG9iYWxdLFxuICAgIGdldE5hbWVzOiBub2RlID0+IG5vZGUuc3BlY2lmaWVycy5tYXAoc3BlY2lmaWVyID0+IHNwZWNpZmllci5sb2NhbC5uYW1lKSxcbiAgfSxcbl07XG5cbmZ1bmN0aW9uIHJlbW92ZVVudXNlZFR5cGVzKHJvb3Q6IENvbGxlY3Rpb24sIG9wdGlvbnM6IFNvdXJjZU9wdGlvbnMpOiB2b2lkIHtcbiAgY29uc3QgZGVjbGFyZWQgPSBnZXREZWNsYXJlZElkZW50aWZpZXJzKHJvb3QsIG9wdGlvbnMpO1xuICBjb25zdCB1c2VkID0gZ2V0Tm9uRGVjbGFyYXRpb25UeXBlcyhyb290LCBvcHRpb25zKTtcbiAgY29uc3Qgbm9uVHlwZUltcG9ydCA9IGdldERlY2xhcmVkVHlwZXMoXG4gICAgcm9vdCxcbiAgICBvcHRpb25zLFxuICAgIFtwYXRoID0+ICFpc1R5cGVJbXBvcnREZWNsYXJhdGlvbihwYXRoLm5vZGUpXVxuICApO1xuICAvLyBSZW1vdmUgdGhpbmdzIGJhc2VkIG9uIHRoZSBjb25maWcuXG4gIENPTkZJRy5mb3JFYWNoKGNvbmZpZyA9PiB7XG4gICAgcm9vdFxuICAgICAgLmZpbmQoY29uZmlnLnNlYXJjaFRlcm1zWzBdLCBjb25maWcuc2VhcmNoVGVybXNbMV0pXG4gICAgICAuZmlsdGVyKHBhdGggPT4gY29uZmlnLmZpbHRlcnMuZXZlcnkoZmlsdGVyID0+IGZpbHRlcihwYXRoKSkpXG4gICAgICAuZmlsdGVyKHBhdGggPT4gY29uZmlnLmdldE5hbWVzKHBhdGgubm9kZSkuZXZlcnkoXG4gICAgICAgIG5hbWUgPT4gIXVzZWQuaGFzKG5hbWUpIHx8IGRlY2xhcmVkLmhhcyhuYW1lKSB8fCBub25UeXBlSW1wb3J0LmhhcyhuYW1lKVxuICAgICAgKSlcbiAgICAgIC5yZW1vdmUoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzVHlwZUltcG9ydERlY2xhcmF0aW9uKG5vZGU6IE5vZGVQYXRoKTogYm9vbGVhbiB7XG4gIHJldHVybiBtYXRjaChub2RlLCB7XG4gICAgdHlwZTogJ0ltcG9ydERlY2xhcmF0aW9uJyxcbiAgICBpbXBvcnRLaW5kOiAndHlwZScsXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVVudXNlZFR5cGVzO1xuIl19
