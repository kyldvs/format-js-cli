
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var StringUtils = require('./StringUtils');

var path = require('path');

function getIdentifiersFromPath(filePath) {
  var ids = new Set();

  var baseName = path.basename(filePath);

  // Get rid of extensions like, '.js', '.jsx', '.react.js', etc.
  var noExtensions = baseName.split('.')[0];

  // These are not valid tokens in an identifier so we have to remove them.
  var splits = noExtensions.split(/[^\w]/);

  // Just a standard identifier.
  ids.add(splits.join(''));

  // Then a camel case identifier (or possibly title case based on file name).
  var camelCaseSplits = [splits[0]];
  for (var i = 1; i < splits.length; i++) {
    camelCaseSplits.push(StringUtils.capitalize(splits[i]));
  }
  ids.add(camelCaseSplits.join(''));

  return ids;
}

function getLiteralFromPath(filePath) {
  var baseName = path.basename(filePath);
  return removeFileType(baseName);
}

function relativizeForRequire(sourcePath, destPath) {
  var relativePath = path.relative(path.dirname(sourcePath), destPath);
  var noFileType = removeFileType(relativePath);
  return !noFileType.startsWith('.') ? '.' + path.sep + noFileType : noFileType;
}

function removeFileType(str) {
  var splits = str.split('.');
  if (splits.length <= 1) {
    return str;
  } else {
    return splits.slice(0, -1).join('.');
  }
}

var ModuleMapUtils = {
  getIdentifiersFromPath: getIdentifiersFromPath,
  getLiteralFromPath: getLiteralFromPath,
  relativizeForRequire: relativizeForRequire
};

module.exports = ModuleMapUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9Nb2R1bGVNYXBVdGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLENBQUM7Ozs7Ozs7Ozs7QUFhWixJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRTdDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0IsU0FBUyxzQkFBc0IsQ0FBQyxRQUFzQixFQUFtQjtBQUN2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDOztBQUV0QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7QUFHekMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBRzVDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7OztBQUczQyxLQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7O0FBR3pCLE1BQU0sZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEMsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsbUJBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ3pEO0FBQ0QsS0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRWxDLFNBQU8sR0FBRyxDQUFDO0NBQ1o7O0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxRQUFzQixFQUFXO0FBQzNELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDekMsU0FBTyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDakM7O0FBRUQsU0FBUyxvQkFBb0IsQ0FDM0IsVUFBd0IsRUFDeEIsUUFBc0IsRUFDUjtBQUNkLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN2RSxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDaEQsU0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLFVBQVUsR0FDM0IsVUFBVSxDQUFDO0NBQ2hCOztBQUVELFNBQVMsY0FBYyxDQUFDLEdBQVcsRUFBVTtBQUMzQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDdEIsV0FBTyxHQUFHLENBQUM7R0FDWixNQUFNO0FBQ0wsV0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN0QztDQUNGOztBQUVELElBQU0sY0FBYyxHQUFHO0FBQ3JCLHdCQUFzQixFQUF0QixzQkFBc0I7QUFDdEIsb0JBQWtCLEVBQWxCLGtCQUFrQjtBQUNsQixzQkFBb0IsRUFBcEIsb0JBQW9CO0NBQ3JCLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZm9ybWF0LWpzLWJhc2UvbGliL3V0aWxzL01vZHVsZU1hcFV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHR5cGUge0Fic29sdXRlUGF0aCwgSWRlbnRpZmllciwgTGl0ZXJhbCwgUmVsYXRpdmVQYXRofSBmcm9tICcuLi90eXBlcy9jb21tb24nO1xuXG5jb25zdCBTdHJpbmdVdGlscyA9IHJlcXVpcmUoJy4vU3RyaW5nVXRpbHMnKTtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuZnVuY3Rpb24gZ2V0SWRlbnRpZmllcnNGcm9tUGF0aChmaWxlUGF0aDogQWJzb2x1dGVQYXRoKTogU2V0PElkZW50aWZpZXI+IHtcbiAgY29uc3QgaWRzID0gbmV3IFNldCgpO1xuXG4gIGNvbnN0IGJhc2VOYW1lID0gcGF0aC5iYXNlbmFtZShmaWxlUGF0aCk7XG5cbiAgLy8gR2V0IHJpZCBvZiBleHRlbnNpb25zIGxpa2UsICcuanMnLCAnLmpzeCcsICcucmVhY3QuanMnLCBldGMuXG4gIGNvbnN0IG5vRXh0ZW5zaW9ucyA9IGJhc2VOYW1lLnNwbGl0KCcuJylbMF07XG5cbiAgLy8gVGhlc2UgYXJlIG5vdCB2YWxpZCB0b2tlbnMgaW4gYW4gaWRlbnRpZmllciBzbyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGVtLlxuICBjb25zdCBzcGxpdHMgPSBub0V4dGVuc2lvbnMuc3BsaXQoL1teXFx3XS8pO1xuXG4gIC8vIEp1c3QgYSBzdGFuZGFyZCBpZGVudGlmaWVyLlxuICBpZHMuYWRkKHNwbGl0cy5qb2luKCcnKSk7XG5cbiAgLy8gVGhlbiBhIGNhbWVsIGNhc2UgaWRlbnRpZmllciAob3IgcG9zc2libHkgdGl0bGUgY2FzZSBiYXNlZCBvbiBmaWxlIG5hbWUpLlxuICBjb25zdCBjYW1lbENhc2VTcGxpdHMgPSBbc3BsaXRzWzBdXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBzcGxpdHMubGVuZ3RoOyBpKyspIHtcbiAgICBjYW1lbENhc2VTcGxpdHMucHVzaChTdHJpbmdVdGlscy5jYXBpdGFsaXplKHNwbGl0c1tpXSkpO1xuICB9XG4gIGlkcy5hZGQoY2FtZWxDYXNlU3BsaXRzLmpvaW4oJycpKTtcblxuICByZXR1cm4gaWRzO1xufVxuXG5mdW5jdGlvbiBnZXRMaXRlcmFsRnJvbVBhdGgoZmlsZVBhdGg6IEFic29sdXRlUGF0aCk6IExpdGVyYWwge1xuICBjb25zdCBiYXNlTmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpO1xuICByZXR1cm4gcmVtb3ZlRmlsZVR5cGUoYmFzZU5hbWUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2aXplRm9yUmVxdWlyZShcbiAgc291cmNlUGF0aDogQWJzb2x1dGVQYXRoLFxuICBkZXN0UGF0aDogQWJzb2x1dGVQYXRoLFxuKTogUmVsYXRpdmVQYXRoIHtcbiAgY29uc3QgcmVsYXRpdmVQYXRoID0gcGF0aC5yZWxhdGl2ZShwYXRoLmRpcm5hbWUoc291cmNlUGF0aCksIGRlc3RQYXRoKTtcbiAgY29uc3Qgbm9GaWxlVHlwZSA9IHJlbW92ZUZpbGVUeXBlKHJlbGF0aXZlUGF0aCk7XG4gIHJldHVybiAhbm9GaWxlVHlwZS5zdGFydHNXaXRoKCcuJylcbiAgICA/ICcuJyArIHBhdGguc2VwICsgbm9GaWxlVHlwZVxuICAgIDogbm9GaWxlVHlwZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlsZVR5cGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBzcGxpdHMgPSBzdHIuc3BsaXQoJy4nKTtcbiAgaWYgKHNwbGl0cy5sZW5ndGggPD0gMSkge1xuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNwbGl0cy5zbGljZSgwLCAtMSkuam9pbignLicpO1xuICB9XG59XG5cbmNvbnN0IE1vZHVsZU1hcFV0aWxzID0ge1xuICBnZXRJZGVudGlmaWVyc0Zyb21QYXRoLFxuICBnZXRMaXRlcmFsRnJvbVBhdGgsXG4gIHJlbGF0aXZpemVGb3JSZXF1aXJlLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVNYXBVdGlscztcbiJdfQ==
