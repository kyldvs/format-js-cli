

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var getNamesFromID = require('./getNamesFromID');
var jscs = require('jscodeshift');

/**
 * These are the ways in which an identifier might be declared, note that these
 * identifiers are safe to use in code. They should not include types that have
 * been declared.
 */
var CONFIG = [
// function foo(...rest) {}
{
  searchTerms: [jscs.FunctionDeclaration],
  getNodes: function getNodes(path) {
    return [path.node.id, path.node.rest].concat(path.node.params);
  }
},

// foo(...rest) {}, in a class body for example
{
  searchTerms: [jscs.FunctionExpression],
  getNodes: function getNodes(path) {
    return [path.node.rest].concat(path.node.params);
  }
},

// var foo;
{
  searchTerms: [jscs.VariableDeclaration],
  getNodes: function getNodes(path) {
    return path.node.declarations.map(function (declaration) {
      return declaration.id;
    });
  }
},

// class foo {}
{
  searchTerms: [jscs.ClassDeclaration],
  getNodes: function getNodes(path) {
    return [path.node.id];
  }
},

// (foo, ...rest) => {}
{
  searchTerms: [jscs.ArrowFunctionExpression],
  getNodes: function getNodes(path) {
    return [path.node.rest].concat(path.node.params);
  }
},

// try {} catch (foo) {}
{
  searchTerms: [jscs.CatchClause],
  getNodes: function getNodes(path) {
    return [path.node.param];
  }
}];

/**
 * This will get a list of all identifiers that are declared within root's AST
 */
function getDeclaredIdentifiers(root, options, filters) {
  // Start with the globals since they are always "declared" and safe to use.
  var moduleMap = options.moduleMap;

  var ids = new Set(moduleMap.getBuiltIns());
  CONFIG.forEach(function (config) {
    root.find(config.searchTerms[0], config.searchTerms[1]).filter(function (path) {
      return filters ? filters.every(function (filter) {
        return filter(path);
      }) : true;
    }).forEach(function (path) {
      var nodes = config.getNodes(path);
      nodes.forEach(function (node) {
        var names = getNamesFromID(node);
        for (var _name of names) {
          ids.add(_name);
        }
      });
    });
  });
  return ids;
}

module.exports = getDeclaredIdentifiers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9nZXREZWNsYXJlZElkZW50aWZpZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxXQUFXLENBQUM7O0FBY1osSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDbkQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7O0FBWXBDLElBQU0sTUFBMEIsR0FBRzs7QUFFakM7QUFDRSxhQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7QUFDdkMsVUFBUSxFQUFFLGtCQUFBLElBQUk7V0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0dBQUE7Q0FDMUU7OztBQUdEO0FBQ0UsYUFBVyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDO0FBQ3RDLFVBQVEsRUFBRSxrQkFBQSxJQUFJO1dBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztHQUFBO0NBQzVEOzs7QUFHRDtBQUNFLGFBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztBQUN2QyxVQUFRLEVBQUUsa0JBQUEsSUFBSTtXQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFBLFdBQVc7YUFBSSxXQUFXLENBQUMsRUFBRTtLQUFBLENBQUM7R0FBQTtDQUM1RTs7O0FBR0Q7QUFDRSxhQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7QUFDcEMsVUFBUSxFQUFFLGtCQUFBLElBQUk7V0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0dBQUE7Q0FDakM7OztBQUdEO0FBQ0UsYUFBVyxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO0FBQzNDLFVBQVEsRUFBRSxrQkFBQSxJQUFJO1dBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztHQUFBO0NBQzVEOzs7QUFHRDtBQUNFLGFBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDL0IsVUFBUSxFQUFFLGtCQUFBLElBQUk7V0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0dBQUE7Q0FDcEMsQ0FDRixDQUFDOzs7OztBQUtGLFNBQVMsc0JBQXNCLENBQzdCLElBQWdCLEVBQ2hCLE9BQXNCLEVBQ3RCLE9BQTZDLEVBQ2hDOztNQUVOLFNBQVMsR0FBSSxPQUFPLENBQXBCLFNBQVM7O0FBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLFFBQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNLEVBQUk7QUFDdkIsUUFBSSxDQUNELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDbEQsTUFBTSxDQUFDLFVBQUEsSUFBSTthQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQUEsTUFBTTtlQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUM7T0FBQSxDQUFDLEdBQUcsSUFBSTtLQUFBLENBQUMsQ0FDdEUsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ2YsVUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNwQyxXQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ3BCLFlBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxhQUFLLElBQU0sS0FBSSxJQUFJLEtBQUssRUFBRTtBQUN4QixhQUFHLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxDQUFDO1NBQ2Y7T0FDRixDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDTixDQUFDLENBQUM7QUFDSCxTQUFPLEdBQUcsQ0FBQztDQUNaOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZm9ybWF0LWpzLWJhc2UvbGliL3V0aWxzL2dldERlY2xhcmVkSWRlbnRpZmllcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sbGVjdGlvbiwgTm9kZSwgTm9kZVBhdGh9IGZyb20gJy4uL3R5cGVzL2FzdCc7XG5pbXBvcnQgdHlwZSB7U291cmNlT3B0aW9uc30gZnJvbSAnLi4vb3B0aW9ucy9Tb3VyY2VPcHRpb25zJztcblxuY29uc3QgZ2V0TmFtZXNGcm9tSUQgPSByZXF1aXJlKCcuL2dldE5hbWVzRnJvbUlEJyk7XG5jb25zdCBqc2NzID0gcmVxdWlyZSgnanNjb2Rlc2hpZnQnKTtcblxudHlwZSBDb25maWdFbnRyeSA9IHtcbiAgc2VhcmNoVGVybXM6IFthbnksIE9iamVjdF0sXG4gIGdldE5vZGVzOiAocGF0aDogTm9kZVBhdGgpID0+IEFycmF5PE5vZGU+LFxufTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHdheXMgaW4gd2hpY2ggYW4gaWRlbnRpZmllciBtaWdodCBiZSBkZWNsYXJlZCwgbm90ZSB0aGF0IHRoZXNlXG4gKiBpZGVudGlmaWVycyBhcmUgc2FmZSB0byB1c2UgaW4gY29kZS4gVGhleSBzaG91bGQgbm90IGluY2x1ZGUgdHlwZXMgdGhhdCBoYXZlXG4gKiBiZWVuIGRlY2xhcmVkLlxuICovXG5jb25zdCBDT05GSUc6IEFycmF5PENvbmZpZ0VudHJ5PiA9IFtcbiAgLy8gZnVuY3Rpb24gZm9vKC4uLnJlc3QpIHt9XG4gIHtcbiAgICBzZWFyY2hUZXJtczogW2pzY3MuRnVuY3Rpb25EZWNsYXJhdGlvbl0sXG4gICAgZ2V0Tm9kZXM6IHBhdGggPT4gW3BhdGgubm9kZS5pZCwgcGF0aC5ub2RlLnJlc3RdLmNvbmNhdChwYXRoLm5vZGUucGFyYW1zKSxcbiAgfSxcblxuICAvLyBmb28oLi4ucmVzdCkge30sIGluIGEgY2xhc3MgYm9keSBmb3IgZXhhbXBsZVxuICB7XG4gICAgc2VhcmNoVGVybXM6IFtqc2NzLkZ1bmN0aW9uRXhwcmVzc2lvbl0sXG4gICAgZ2V0Tm9kZXM6IHBhdGggPT4gW3BhdGgubm9kZS5yZXN0XS5jb25jYXQocGF0aC5ub2RlLnBhcmFtcyksXG4gIH0sXG5cbiAgLy8gdmFyIGZvbztcbiAge1xuICAgIHNlYXJjaFRlcm1zOiBbanNjcy5WYXJpYWJsZURlY2xhcmF0aW9uXSxcbiAgICBnZXROb2RlczogcGF0aCA9PiBwYXRoLm5vZGUuZGVjbGFyYXRpb25zLm1hcChkZWNsYXJhdGlvbiA9PiBkZWNsYXJhdGlvbi5pZCksXG4gIH0sXG5cbiAgLy8gY2xhc3MgZm9vIHt9XG4gIHtcbiAgICBzZWFyY2hUZXJtczogW2pzY3MuQ2xhc3NEZWNsYXJhdGlvbl0sXG4gICAgZ2V0Tm9kZXM6IHBhdGggPT4gW3BhdGgubm9kZS5pZF0sXG4gIH0sXG5cbiAgLy8gKGZvbywgLi4ucmVzdCkgPT4ge31cbiAge1xuICAgIHNlYXJjaFRlcm1zOiBbanNjcy5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbl0sXG4gICAgZ2V0Tm9kZXM6IHBhdGggPT4gW3BhdGgubm9kZS5yZXN0XS5jb25jYXQocGF0aC5ub2RlLnBhcmFtcyksXG4gIH0sXG5cbiAgLy8gdHJ5IHt9IGNhdGNoIChmb28pIHt9XG4gIHtcbiAgICBzZWFyY2hUZXJtczogW2pzY3MuQ2F0Y2hDbGF1c2VdLFxuICAgIGdldE5vZGVzOiBwYXRoID0+IFtwYXRoLm5vZGUucGFyYW1dLFxuICB9LFxuXTtcblxuLyoqXG4gKiBUaGlzIHdpbGwgZ2V0IGEgbGlzdCBvZiBhbGwgaWRlbnRpZmllcnMgdGhhdCBhcmUgZGVjbGFyZWQgd2l0aGluIHJvb3QncyBBU1RcbiAqL1xuZnVuY3Rpb24gZ2V0RGVjbGFyZWRJZGVudGlmaWVycyhcbiAgcm9vdDogQ29sbGVjdGlvbixcbiAgb3B0aW9uczogU291cmNlT3B0aW9ucyxcbiAgZmlsdGVycz86ID9BcnJheTwocGF0aDogTm9kZVBhdGgpID0+IGJvb2xlYW4+XG4pOiBTZXQ8c3RyaW5nPiB7XG4gIC8vIFN0YXJ0IHdpdGggdGhlIGdsb2JhbHMgc2luY2UgdGhleSBhcmUgYWx3YXlzIFwiZGVjbGFyZWRcIiBhbmQgc2FmZSB0byB1c2UuXG4gIGNvbnN0IHttb2R1bGVNYXB9ID0gb3B0aW9ucztcbiAgY29uc3QgaWRzID0gbmV3IFNldChtb2R1bGVNYXAuZ2V0QnVpbHRJbnMoKSk7XG4gIENPTkZJRy5mb3JFYWNoKGNvbmZpZyA9PiB7XG4gICAgcm9vdFxuICAgICAgLmZpbmQoY29uZmlnLnNlYXJjaFRlcm1zWzBdLCBjb25maWcuc2VhcmNoVGVybXNbMV0pXG4gICAgICAuZmlsdGVyKHBhdGggPT4gZmlsdGVycyA/IGZpbHRlcnMuZXZlcnkoZmlsdGVyID0+IGZpbHRlcihwYXRoKSkgOiB0cnVlKVxuICAgICAgLmZvckVhY2gocGF0aCA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gY29uZmlnLmdldE5vZGVzKHBhdGgpO1xuICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgIGNvbnN0IG5hbWVzID0gZ2V0TmFtZXNGcm9tSUQobm9kZSk7XG4gICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICBpZHMuYWRkKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBpZHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RGVjbGFyZWRJZGVudGlmaWVycztcbiJdfQ==
