var _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

'use babel';

var _require = require('./StringUtils');

var compareStrings = _require.compareStrings;

var jscs = require('jscodeshift');
var oneLineObjectPattern = require('./oneLineObjectPattern');
var reprintComment = require('./reprintComment');

var statement = jscs.template.statement;

/**
 * Thin wrapper to reprint requires, it's wrapped in a new function in order to
 * easily attach comments to the node.
 */
function reprintRequire(node) {
  var comments = node.comments;
  var newNode = reprintRequireHelper(node);
  if (comments) {
    newNode.comments = comments.map(function (comment) {
      return reprintComment(comment);
    });
  }
  return newNode;
}

/**
 * This takes in a require node and reprints it. This should remove whitespace
 * and allow us to have a consistent formatting of all requires.
 */
function reprintRequireHelper(node) {
  if (jscs.ExpressionStatement.check(node)) {
    return statement(_templateObject, node.expression);
  }

  if (jscs.VariableDeclaration.check(node)) {
    var kind = node.kind || 'const';
    var declaration = node.declarations[0];
    if (jscs.Identifier.check(declaration.id)) {
      return jscs.variableDeclaration(kind, [jscs.variableDeclarator(declaration.id, declaration.init)]);
    } else if (jscs.ObjectPattern.check(declaration.id)) {
      declaration.id.properties.sort(function (prop1, prop2) {
        return compareStrings(prop1.key.name, prop2.key.name);
      });
      return jscs.variableDeclaration(kind, [jscs.variableDeclarator(oneLineObjectPattern(declaration.id), declaration.init)]);
    } else if (jscs.ArrayPattern.check(declaration.id)) {
      return jscs.variableDeclaration(kind, [jscs.variableDeclarator(declaration.id, declaration.init)]);
    }
  }

  if (jscs.ImportDeclaration.check(node) && node.importKind === 'type') {
    // Sort the specifiers.
    node.specifiers.sort(function (one, two) {
      return compareStrings(one.local.name, two.local.name);
    });
    // TODO: Properly remove new lines from the node.
    return node;
  }

  return node;
}

module.exports = reprintRequire;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9yZXByaW50UmVxdWlyZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxXQUFXLENBQUM7O2VBYWEsT0FBTyxDQUFDLGVBQWUsQ0FBQzs7SUFBMUMsY0FBYyxZQUFkLGNBQWM7O0FBQ3JCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQyxJQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQy9ELElBQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztJQUU1QyxTQUFTLEdBQUksSUFBSSxDQUFDLFFBQVEsQ0FBMUIsU0FBUzs7Ozs7O0FBTWhCLFNBQVMsY0FBYyxDQUFDLElBQVUsRUFBUTtBQUN4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQy9CLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLE1BQUksUUFBUSxFQUFFO0FBQ1osV0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTzthQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUM7S0FBQSxDQUFDLENBQUM7R0FDckU7QUFDRCxTQUFPLE9BQU8sQ0FBQztDQUNoQjs7Ozs7O0FBTUQsU0FBUyxvQkFBb0IsQ0FBQyxJQUFVLEVBQVE7QUFDOUMsTUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ3hDLFdBQU8sU0FBUyxrQkFBRyxJQUFJLENBQUMsVUFBVSxFQUFHO0dBQ3RDOztBQUVELE1BQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUN4QyxRQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQztBQUNsQyxRQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLFFBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3pDLGFBQU8sSUFBSSxDQUFDLG1CQUFtQixDQUM3QixJQUFJLEVBQ0osQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDNUQsQ0FBQztLQUNILE1BQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDbkQsaUJBQVcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLLEVBQUs7QUFDL0MsZUFBTyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN2RCxDQUFDLENBQUM7QUFDSCxhQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FDN0IsSUFBSSxFQUNKLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUN0QixvQkFBb0IsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQ3BDLFdBQVcsQ0FBQyxJQUFJLENBQ2pCLENBQUMsQ0FDSCxDQUFDO0tBQ0gsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNsRCxhQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FDN0IsSUFBSSxFQUNKLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzVELENBQUM7S0FDSDtHQUNGOztBQUVELE1BQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sRUFBRTs7QUFFcEUsUUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRzthQUFLLGNBQWMsQ0FDL0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ2QsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2Y7S0FBQSxDQUFDLENBQUM7O0FBRUgsV0FBTyxJQUFJLENBQUM7R0FDYjs7QUFFRCxTQUFPLElBQUksQ0FBQztDQUNiOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9yZXByaW50UmVxdWlyZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtOb2RlfSBmcm9tICcuLi90eXBlcy9hc3QnO1xuXG5jb25zdCB7Y29tcGFyZVN0cmluZ3N9ID0gcmVxdWlyZSgnLi9TdHJpbmdVdGlscycpO1xuY29uc3QganNjcyA9IHJlcXVpcmUoJ2pzY29kZXNoaWZ0Jyk7XG5jb25zdCBvbmVMaW5lT2JqZWN0UGF0dGVybiA9IHJlcXVpcmUoJy4vb25lTGluZU9iamVjdFBhdHRlcm4nKTtcbmNvbnN0IHJlcHJpbnRDb21tZW50ID0gcmVxdWlyZSgnLi9yZXByaW50Q29tbWVudCcpO1xuXG5jb25zdCB7c3RhdGVtZW50fSA9IGpzY3MudGVtcGxhdGU7XG5cbi8qKlxuICogVGhpbiB3cmFwcGVyIHRvIHJlcHJpbnQgcmVxdWlyZXMsIGl0J3Mgd3JhcHBlZCBpbiBhIG5ldyBmdW5jdGlvbiBpbiBvcmRlciB0b1xuICogZWFzaWx5IGF0dGFjaCBjb21tZW50cyB0byB0aGUgbm9kZS5cbiAqL1xuZnVuY3Rpb24gcmVwcmludFJlcXVpcmUobm9kZTogTm9kZSk6IE5vZGUge1xuICBjb25zdCBjb21tZW50cyA9IG5vZGUuY29tbWVudHM7XG4gIGNvbnN0IG5ld05vZGUgPSByZXByaW50UmVxdWlyZUhlbHBlcihub2RlKTtcbiAgaWYgKGNvbW1lbnRzKSB7XG4gICAgbmV3Tm9kZS5jb21tZW50cyA9IGNvbW1lbnRzLm1hcChjb21tZW50ID0+IHJlcHJpbnRDb21tZW50KGNvbW1lbnQpKTtcbiAgfVxuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuLyoqXG4gKiBUaGlzIHRha2VzIGluIGEgcmVxdWlyZSBub2RlIGFuZCByZXByaW50cyBpdC4gVGhpcyBzaG91bGQgcmVtb3ZlIHdoaXRlc3BhY2VcbiAqIGFuZCBhbGxvdyB1cyB0byBoYXZlIGEgY29uc2lzdGVudCBmb3JtYXR0aW5nIG9mIGFsbCByZXF1aXJlcy5cbiAqL1xuZnVuY3Rpb24gcmVwcmludFJlcXVpcmVIZWxwZXIobm9kZTogTm9kZSk6IE5vZGUge1xuICBpZiAoanNjcy5FeHByZXNzaW9uU3RhdGVtZW50LmNoZWNrKG5vZGUpKSB7XG4gICAgcmV0dXJuIHN0YXRlbWVudGAke25vZGUuZXhwcmVzc2lvbn1gO1xuICB9XG5cbiAgaWYgKGpzY3MuVmFyaWFibGVEZWNsYXJhdGlvbi5jaGVjayhub2RlKSkge1xuICAgIGNvbnN0IGtpbmQgPSBub2RlLmtpbmQgfHwgJ2NvbnN0JztcbiAgICBjb25zdCBkZWNsYXJhdGlvbiA9IG5vZGUuZGVjbGFyYXRpb25zWzBdO1xuICAgIGlmIChqc2NzLklkZW50aWZpZXIuY2hlY2soZGVjbGFyYXRpb24uaWQpKSB7XG4gICAgICByZXR1cm4ganNjcy52YXJpYWJsZURlY2xhcmF0aW9uKFxuICAgICAgICBraW5kLFxuICAgICAgICBbanNjcy52YXJpYWJsZURlY2xhcmF0b3IoZGVjbGFyYXRpb24uaWQsIGRlY2xhcmF0aW9uLmluaXQpXSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChqc2NzLk9iamVjdFBhdHRlcm4uY2hlY2soZGVjbGFyYXRpb24uaWQpKSB7XG4gICAgICBkZWNsYXJhdGlvbi5pZC5wcm9wZXJ0aWVzLnNvcnQoKHByb3AxLCBwcm9wMikgPT4ge1xuICAgICAgICByZXR1cm4gY29tcGFyZVN0cmluZ3MocHJvcDEua2V5Lm5hbWUsIHByb3AyLmtleS5uYW1lKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGpzY3MudmFyaWFibGVEZWNsYXJhdGlvbihcbiAgICAgICAga2luZCxcbiAgICAgICAgW2pzY3MudmFyaWFibGVEZWNsYXJhdG9yKFxuICAgICAgICAgIG9uZUxpbmVPYmplY3RQYXR0ZXJuKGRlY2xhcmF0aW9uLmlkKSxcbiAgICAgICAgICBkZWNsYXJhdGlvbi5pbml0LFxuICAgICAgICApXSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChqc2NzLkFycmF5UGF0dGVybi5jaGVjayhkZWNsYXJhdGlvbi5pZCkpIHtcbiAgICAgIHJldHVybiBqc2NzLnZhcmlhYmxlRGVjbGFyYXRpb24oXG4gICAgICAgIGtpbmQsXG4gICAgICAgIFtqc2NzLnZhcmlhYmxlRGVjbGFyYXRvcihkZWNsYXJhdGlvbi5pZCwgZGVjbGFyYXRpb24uaW5pdCldLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoanNjcy5JbXBvcnREZWNsYXJhdGlvbi5jaGVjayhub2RlKSAmJiBub2RlLmltcG9ydEtpbmQgPT09ICd0eXBlJykge1xuICAgIC8vIFNvcnQgdGhlIHNwZWNpZmllcnMuXG4gICAgbm9kZS5zcGVjaWZpZXJzLnNvcnQoKG9uZSwgdHdvKSA9PiBjb21wYXJlU3RyaW5ncyhcbiAgICAgIG9uZS5sb2NhbC5uYW1lLFxuICAgICAgdHdvLmxvY2FsLm5hbWVcbiAgICApKTtcbiAgICAvLyBUT0RPOiBQcm9wZXJseSByZW1vdmUgbmV3IGxpbmVzIGZyb20gdGhlIG5vZGUuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXByaW50UmVxdWlyZTtcbiJdfQ==
