
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var jscs = require('jscodeshift');

/**
 * This module helps support a hack to easily introduce new lines into the AST.
 */
var NewLine = Object.defineProperties({
  literal: '$$newline$$',
  replace: function replace(input) {
    /**
     * This regex functions by matching:
     *
     *   - contiguous new lines
     *   - non new line characters
     *   - the string "$$newline$$" and surrounding characters
     *   - non new line characters
     *   - contiguous new lines
     *
     * This way it only removes extra new lines around the explicit new lines
     * we have added in the file. It does not remove arbitrary extra new lines.
     */
    return input.replace(/(\n*[^\n]*\$\$newline\$\$[^\n]*\n*){1,}/g, '\n\n');
  }
}, {
  statement: {
    get: function get() {
      return jscs.expressionStatement(jscs.literal(NewLine.literal));
    },
    configurable: true,
    enumerable: true
  }
});

module.exports = NewLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9OZXdMaW5lLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVcsQ0FBQzs7Ozs7Ozs7OztBQVdaLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7Ozs7QUFLcEMsSUFBTSxPQUFPLDJCQUFHO0FBQ2QsU0FBTyxFQUFFLGFBQWE7QUFDdEIsU0FBTyxFQUFBLGlCQUFDLEtBQWEsRUFBVTs7Ozs7Ozs7Ozs7OztBQWE3QixXQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsMENBQTBDLEVBQUUsTUFBTSxDQUFDLENBQUM7R0FDMUU7Q0FJRjtBQUhLLFdBQVM7U0FBQSxlQUFHO0FBQ2QsYUFBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNoRTs7OztFQUNGLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZm9ybWF0LWpzLWJhc2UvbGliL3V0aWxzL05ld0xpbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBqc2NzID0gcmVxdWlyZSgnanNjb2Rlc2hpZnQnKTtcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBoZWxwcyBzdXBwb3J0IGEgaGFjayB0byBlYXNpbHkgaW50cm9kdWNlIG5ldyBsaW5lcyBpbnRvIHRoZSBBU1QuXG4gKi9cbmNvbnN0IE5ld0xpbmUgPSB7XG4gIGxpdGVyYWw6ICckJG5ld2xpbmUkJCcsXG4gIHJlcGxhY2UoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLyoqXG4gICAgICogVGhpcyByZWdleCBmdW5jdGlvbnMgYnkgbWF0Y2hpbmc6XG4gICAgICpcbiAgICAgKiAgIC0gY29udGlndW91cyBuZXcgbGluZXNcbiAgICAgKiAgIC0gbm9uIG5ldyBsaW5lIGNoYXJhY3RlcnNcbiAgICAgKiAgIC0gdGhlIHN0cmluZyBcIiQkbmV3bGluZSQkXCIgYW5kIHN1cnJvdW5kaW5nIGNoYXJhY3RlcnNcbiAgICAgKiAgIC0gbm9uIG5ldyBsaW5lIGNoYXJhY3RlcnNcbiAgICAgKiAgIC0gY29udGlndW91cyBuZXcgbGluZXNcbiAgICAgKlxuICAgICAqIFRoaXMgd2F5IGl0IG9ubHkgcmVtb3ZlcyBleHRyYSBuZXcgbGluZXMgYXJvdW5kIHRoZSBleHBsaWNpdCBuZXcgbGluZXNcbiAgICAgKiB3ZSBoYXZlIGFkZGVkIGluIHRoZSBmaWxlLiBJdCBkb2VzIG5vdCByZW1vdmUgYXJiaXRyYXJ5IGV4dHJhIG5ldyBsaW5lcy5cbiAgICAgKi9cbiAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKFxcbipbXlxcbl0qXFwkXFwkbmV3bGluZVxcJFxcJFteXFxuXSpcXG4qKXsxLH0vZywgJ1xcblxcbicpO1xuICB9LFxuICBnZXQgc3RhdGVtZW50KCkge1xuICAgIHJldHVybiBqc2NzLmV4cHJlc3Npb25TdGF0ZW1lbnQoanNjcy5saXRlcmFsKE5ld0xpbmUubGl0ZXJhbCkpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBOZXdMaW5lO1xuIl19
