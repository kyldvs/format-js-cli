
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var NewLine = require('./NewLine');

function printRoot(root) {
  // Print the new source.
  var output = root.toSource({ quote: 'single', trailingComma: true });

  // Remove all new lines between require fences that are not explicitly added
  // by the NewLine module.
  var lines = output.split('\n');
  var first = lines.length - 1;
  var last = 0;
  for (var i = 0; i < lines.length; i++) {
    if (lines[i].indexOf(NewLine.literal) !== -1) {
      first = Math.min(first, i);
      last = Math.max(last, i);
    }
  }

  // Filter out the empty lines that are between NewLine markers.
  output = lines.filter(function (line, index) {
    return line || index < first || index > last;
  }).join('\n');

  // Remove the NewLine markers.
  output = NewLine.replace(output);

  // Remove new lines at the start.
  output = output.replace(/^\n{1,}/, '');

  // Make sure there is a new line at the end.
  if (!/^[\w\W]*\n$/.test(output)) {
    output = output + '\n';
  }

  return output;
}

module.exports = printRoot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9wcmludFJvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBYVosSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUVyQyxTQUFTLFNBQVMsQ0FBQyxJQUFnQixFQUFVOztBQUUzQyxNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQzs7OztBQUluRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLE1BQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLE1BQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNiLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JDLFFBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7QUFDNUMsV0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLFVBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUMxQjtHQUNGOzs7QUFHRCxRQUFNLEdBQUcsS0FBSyxDQUNYLE1BQU0sQ0FBQyxVQUFDLElBQUksRUFBRSxLQUFLO1dBQUssSUFBSSxJQUFJLEtBQUssR0FBRyxLQUFLLElBQUksS0FBSyxHQUFHLElBQUk7R0FBQSxDQUFDLENBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs7O0FBR2QsUUFBTSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7OztBQUdqQyxRQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7OztBQUd2QyxNQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtBQUMvQixVQUFNLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQztHQUN4Qjs7QUFFRCxTQUFPLE1BQU0sQ0FBQztDQUNmOztBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwiZmlsZSI6Ii92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9wcmludFJvb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcbi8qIEBmbG93ICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgbGljZW5zZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluXG4gKiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q29sbGVjdGlvbn0gZnJvbSAnLi4vdHlwZXMvYXN0JztcblxuY29uc3QgTmV3TGluZSA9IHJlcXVpcmUoJy4vTmV3TGluZScpO1xuXG5mdW5jdGlvbiBwcmludFJvb3Qocm9vdDogQ29sbGVjdGlvbik6IHN0cmluZyB7XG4gIC8vIFByaW50IHRoZSBuZXcgc291cmNlLlxuICBsZXQgb3V0cHV0ID0gcm9vdC50b1NvdXJjZSh7cXVvdGU6ICdzaW5nbGUnLCB0cmFpbGluZ0NvbW1hOiB0cnVlfSk7XG5cbiAgLy8gUmVtb3ZlIGFsbCBuZXcgbGluZXMgYmV0d2VlbiByZXF1aXJlIGZlbmNlcyB0aGF0IGFyZSBub3QgZXhwbGljaXRseSBhZGRlZFxuICAvLyBieSB0aGUgTmV3TGluZSBtb2R1bGUuXG4gIGNvbnN0IGxpbmVzID0gb3V0cHV0LnNwbGl0KCdcXG4nKTtcbiAgbGV0IGZpcnN0ID0gbGluZXMubGVuZ3RoIC0gMTtcbiAgbGV0IGxhc3QgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxpbmVzW2ldLmluZGV4T2YoTmV3TGluZS5saXRlcmFsKSAhPT0gLTEpIHtcbiAgICAgIGZpcnN0ID0gTWF0aC5taW4oZmlyc3QsIGkpO1xuICAgICAgbGFzdCA9IE1hdGgubWF4KGxhc3QsIGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbHRlciBvdXQgdGhlIGVtcHR5IGxpbmVzIHRoYXQgYXJlIGJldHdlZW4gTmV3TGluZSBtYXJrZXJzLlxuICBvdXRwdXQgPSBsaW5lc1xuICAgIC5maWx0ZXIoKGxpbmUsIGluZGV4KSA9PiBsaW5lIHx8IGluZGV4IDwgZmlyc3QgfHwgaW5kZXggPiBsYXN0KVxuICAgIC5qb2luKCdcXG4nKTtcblxuICAvLyBSZW1vdmUgdGhlIE5ld0xpbmUgbWFya2Vycy5cbiAgb3V0cHV0ID0gTmV3TGluZS5yZXBsYWNlKG91dHB1dCk7XG5cbiAgLy8gUmVtb3ZlIG5ldyBsaW5lcyBhdCB0aGUgc3RhcnQuXG4gIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9eXFxuezEsfS8sICcnKTtcblxuICAvLyBNYWtlIHN1cmUgdGhlcmUgaXMgYSBuZXcgbGluZSBhdCB0aGUgZW5kLlxuICBpZiAoIS9eW1xcd1xcV10qXFxuJC8udGVzdChvdXRwdXQpKSB7XG4gICAgb3V0cHV0ID0gb3V0cHV0ICsgJ1xcbic7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByaW50Um9vdDtcbiJdfQ==
