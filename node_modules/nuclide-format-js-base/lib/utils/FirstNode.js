
/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var NewLine = require('./NewLine');

var getRootIdentifierInExpression = require('./getRootIdentifierInExpression');
var isGlobal = require('./isGlobal');
var jscs = require('jscodeshift');

var match = jscs.match;

var FirstNode = {
  /**
   * Gets the first node that it's safe to insert before on.
   *
   * Note: We never need to add a first node. If a first node doesn't exist
   * then there isn't ever code that would result in a require being changed.
   */
  get: function get(root) {
    var first = undefined;
    root.find(jscs.Node).filter(function (path) {
      return isGlobal(path);
    }).forEach(function (path) {
      if (!first && FirstNode.isValidFirstNode(path)) {
        first = path;
      }
    });
    return first;
  },

  /**
   * Filter to see if a node is a valid first node.
   */
  isValidFirstNode: function isValidFirstNode(path) {
    // A new line literal is okay.
    if (match(path, { expression: { value: NewLine.literal } })) {
      return true;
    }
    // Any other literal is not.
    if (match(path, { expression: { type: 'Literal' } })) {
      return false;
    }
    var firstObject = getRootIdentifierInExpression(path.node);
    if (firstObject && match(firstObject, { name: 'jest' })) {
      return false;
    }
    return true;
  }
};

module.exports = FirstNode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvZm9sZGVycy94Zi9yc3BoNF9jNTczMTVyczU3eHhzZHNrcnhudjM2dDAvVC90bXBwZmw1Mm5wdWJsaXNoX3BhY2thZ2VzL25wbS9udWNsaWRlLWZvcm1hdC1qcy1iYXNlL2xpYi91dGlscy9GaXJzdE5vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDOzs7Ozs7Ozs7O0FBYVosSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUVyQyxJQUFNLDZCQUE2QixHQUFHLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ2pGLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7O0lBRTdCLEtBQUssR0FBSSxJQUFJLENBQWIsS0FBSzs7QUFFWixJQUFNLFNBQVMsR0FBRzs7Ozs7OztBQU9oQixLQUFHLEVBQUEsYUFBQyxJQUFnQixFQUFhO0FBQy9CLFFBQUksS0FBSyxZQUFBLENBQUM7QUFDVixRQUFJLENBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDZixNQUFNLENBQUMsVUFBQSxJQUFJO2FBQUksUUFBUSxDQUFDLElBQUksQ0FBQztLQUFBLENBQUMsQ0FDOUIsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0FBQ2YsVUFBSSxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDOUMsYUFBSyxHQUFHLElBQUksQ0FBQztPQUNkO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsV0FBTyxLQUFLLENBQUM7R0FDZDs7Ozs7QUFLRCxrQkFBZ0IsRUFBQSwwQkFBQyxJQUFjLEVBQVc7O0FBRXhDLFFBQUksS0FBSyxDQUFDLElBQUksRUFBRSxFQUFDLFVBQVUsRUFBRSxFQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFDLEVBQUMsQ0FBQyxFQUFFO0FBQ3ZELGFBQU8sSUFBSSxDQUFDO0tBQ2I7O0FBRUQsUUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUMsVUFBVSxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBQyxFQUFDLENBQUMsRUFBRTtBQUNoRCxhQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0QsUUFBTSxXQUFXLEdBQUcsNkJBQTZCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdELFFBQUksV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsRUFBRTtBQUNyRCxhQUFPLEtBQUssQ0FBQztLQUNkO0FBQ0QsV0FBTyxJQUFJLENBQUM7R0FDYjtDQUNGLENBQUM7O0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMiLCJmaWxlIjoiL3Zhci9mb2xkZXJzL3hmL3JzcGg0X2M1NzMxNXJzNTd4eHNkc2tyeG52MzZ0MC9UL3RtcHBmbDUybnB1Ymxpc2hfcGFja2FnZXMvbnBtL251Y2xpZGUtZm9ybWF0LWpzLWJhc2UvbGliL3V0aWxzL0ZpcnN0Tm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB0eXBlIHtDb2xsZWN0aW9uLCBOb2RlUGF0aH0gZnJvbSAnLi4vdHlwZXMvYXN0JztcblxuY29uc3QgTmV3TGluZSA9IHJlcXVpcmUoJy4vTmV3TGluZScpO1xuXG5jb25zdCBnZXRSb290SWRlbnRpZmllckluRXhwcmVzc2lvbiA9IHJlcXVpcmUoJy4vZ2V0Um9vdElkZW50aWZpZXJJbkV4cHJlc3Npb24nKTtcbmNvbnN0IGlzR2xvYmFsID0gcmVxdWlyZSgnLi9pc0dsb2JhbCcpO1xuY29uc3QganNjcyA9IHJlcXVpcmUoJ2pzY29kZXNoaWZ0Jyk7XG5cbmNvbnN0IHttYXRjaH0gPSBqc2NzO1xuXG5jb25zdCBGaXJzdE5vZGUgPSB7XG4gIC8qKlxuICAgKiBHZXRzIHRoZSBmaXJzdCBub2RlIHRoYXQgaXQncyBzYWZlIHRvIGluc2VydCBiZWZvcmUgb24uXG4gICAqXG4gICAqIE5vdGU6IFdlIG5ldmVyIG5lZWQgdG8gYWRkIGEgZmlyc3Qgbm9kZS4gSWYgYSBmaXJzdCBub2RlIGRvZXNuJ3QgZXhpc3RcbiAgICogdGhlbiB0aGVyZSBpc24ndCBldmVyIGNvZGUgdGhhdCB3b3VsZCByZXN1bHQgaW4gYSByZXF1aXJlIGJlaW5nIGNoYW5nZWQuXG4gICAqL1xuICBnZXQocm9vdDogQ29sbGVjdGlvbik6ID9Ob2RlUGF0aCB7XG4gICAgbGV0IGZpcnN0O1xuICAgIHJvb3RcbiAgICAgIC5maW5kKGpzY3MuTm9kZSlcbiAgICAgIC5maWx0ZXIocGF0aCA9PiBpc0dsb2JhbChwYXRoKSlcbiAgICAgIC5mb3JFYWNoKHBhdGggPT4ge1xuICAgICAgICBpZiAoIWZpcnN0ICYmIEZpcnN0Tm9kZS5pc1ZhbGlkRmlyc3ROb2RlKHBhdGgpKSB7XG4gICAgICAgICAgZmlyc3QgPSBwYXRoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICByZXR1cm4gZmlyc3Q7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlciB0byBzZWUgaWYgYSBub2RlIGlzIGEgdmFsaWQgZmlyc3Qgbm9kZS5cbiAgICovXG4gIGlzVmFsaWRGaXJzdE5vZGUocGF0aDogTm9kZVBhdGgpOiBib29sZWFuIHtcbiAgICAvLyBBIG5ldyBsaW5lIGxpdGVyYWwgaXMgb2theS5cbiAgICBpZiAobWF0Y2gocGF0aCwge2V4cHJlc3Npb246IHt2YWx1ZTogTmV3TGluZS5saXRlcmFsfX0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQW55IG90aGVyIGxpdGVyYWwgaXMgbm90LlxuICAgIGlmIChtYXRjaChwYXRoLCB7ZXhwcmVzc2lvbjoge3R5cGU6ICdMaXRlcmFsJ319KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdE9iamVjdCA9IGdldFJvb3RJZGVudGlmaWVySW5FeHByZXNzaW9uKHBhdGgubm9kZSk7XG4gICAgaWYgKGZpcnN0T2JqZWN0ICYmIG1hdGNoKGZpcnN0T2JqZWN0LCB7bmFtZTogJ2plc3QnfSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpcnN0Tm9kZTtcbiJdfQ==
